source('C:/ckd/personal/coursera/MachineLearning/quiz2.R')
quiz2_quest5()
source('C:/ckd/personal/coursera/MachineLearning/quiz2.R')
quiz2_quest5()
adData[ inTrain,grepl("^IL(.*)", colnames(training))]
training[,  grepl("^IL(.*)", colnames(training))]
head(training[,  grepl("^IL(.*)|diagnosis", colnames(training))])
source('C:/ckd/personal/coursera/MachineLearning/quiz2.R')
source('C:/ckd/personal/coursera/MachineLearning/quiz2.R')
quiz2_quest5()
source('C:/ckd/personal/coursera/MachineLearning/quiz2.R')
quiz2_quest5()
source('C:/ckd/personal/coursera/MachineLearning/quiz2.R')
quiz2_quest5()
testing <- testing[, grepl("^IL(.*)|diagnosis", colnames(testing))]
modelFit <- train(training$diagnosis ~ .,method="glm",preProcess="pca",data=training)
?train
library(caret)
install.packages('caret', dependencies = TRUE)
install.packages("caret", dependencies = TRUE)
source('C:/ckd/personal/coursera/MachineLearning/quiz2.R')
quiz2_quest5()
?train
source('C:/ckd/personal/coursera/MachineLearning/quiz2.R')
quiz2_quest5()
?train
?train
source('C:/ckd/personal/coursera/MachineLearning/quiz2.R')
quiz2_quest5()
source('C:/ckd/personal/coursera/MachineLearning/quiz2.R')
quiz2_quest5()
source('C:/ckd/personal/coursera/MachineLearning/quiz2.R')
quiz2_quest5()
source('C:/ckd/personal/coursera/MachineLearning/quiz2.R')
quiz2_quest5()
source('C:/ckd/personal/coursera/MachineLearning/quiz2.R')
quiz2_quest5()
source('C:/ckd/personal/coursera/MachineLearning/quiz2.R')
quiz2_quest5()
source('C:/ckd/personal/coursera/MachineLearning/quiz2.R')
source('C:/ckd/personal/coursera/MachineLearning/quiz2.R')
quiz2_quest5()
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData <- data.frame(diagnosis,predictors)
inTrain <- createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training <- adData[ inTrain,]
testing <- adData[-inTrain,]
training <- training[, grepl("^IL(.*)|diagnosis", colnames(training))]
testing <- testing[, grepl("^IL(.*)|diagnosis", colnames(testing))]
head(training[, grepl("^IL(.*)", colnames(training))])
preProc <- preProcess(training[, grepl("^IL(.*)", colnames(training))],method="pca",thresh=.8)
preProc
trainPC <- predict(preProc, training)
trainPC <- predict(preProc, training[, grepl("^IL(.*)", colnames(training))])
source('C:/ckd/personal/coursera/MachineLearning/quiz2.R')
quiz2_quest5()
modelFit <- train(training$diagnosis ~ .,method="glm",data=trainPC)
confusionMatrix(testing$diagnosis, predict(modelFit, testing))
?trainControl
ctrl <- trainControl(preProcOptions = list(thresh = .80))
ctrl
?trControl
?trainControl
source('C:/ckd/personal/coursera/MachineLearning/quiz2.R')
quiz2_quest5()
source('C:/ckd/personal/coursera/MachineLearning/quiz2.R')
quiz2_quest5()
source('C:/ckd/personal/coursera/MachineLearning/quiz2.R')
quiz2_quest5()
source('C:/ckd/personal/coursera/MachineLearning/quiz2.R')
quiz2_quest5()
source('C:/ckd/personal/coursera/MachineLearning/quiz2.R')
quiz2_quest5()
?qplot
source('C:/ckd/personal/coursera/MachineLearning/quiz2.R')
quiz2_quest2()
source('C:/ckd/personal/coursera/MachineLearning/quiz2.R')
quiz2_quest2()
source('C:/ckd/personal/coursera/MachineLearning/quiz2.R')
quiz2_quest2()
quiz2_quest2()
source('C:/ckd/personal/coursera/MachineLearning/quiz2.R')
quiz2_quest2()
source('C:/ckd/personal/coursera/MachineLearning/quiz2.R')
quiz2_quest2()
cut2(cement$FlyAsh, g=4)
cut2(cement$Age, g=4)
data(cement)
data(concrete)
source('C:/ckd/personal/coursera/MachineLearning/quiz2.R')
quiz2_quest2()
source('C:/ckd/personal/coursera/MachineLearning/quiz2.R')
quiz2_quest2()
source('C:/ckd/personal/coursera/MachineLearning/quiz2.R')
quiz2_quest2()
adData = data.frame(diagnosis,predictors)
trainIndex = createDataPartition(diagnosis, p = 0.50,list=FALSE)
training = adData[trainIndex,]
testing = adData[-trainIndex,]
adData <- data.frame(diagnosis,predictors)
trainIndex <- createDataPartition(diagnosis, p = 0.50,list=FALSE)
training <- adData[trainIndex,]
testing <- adData[-trainIndex,]
summary(training)
str(training)
summary(training)
summary(testing)
?createPartionData
?createPartitonData
?createDataPartition
adData <- data.frame(diagnosis,predictors)
trainIndex <- createDataPartition(diagnosis, p = 0.50)
training <- adData[trainIndex,]
testing <- adData[-trainIndex,]
log(0)
log(concrete$Superplasticizer)
source('C:/ckd/personal/coursera/MachineLearning/quiz2.R')
quic2_quest4()
quiz2_quest4()
source('C:/ckd/personal/coursera/MachineLearning/quiz2.R')
quiz2_quest2()
source('C:/ckd/personal/coursera/MachineLearning/quiz2.R')
quiz2_quest2()
source('C:/ckd/personal/coursera/MachineLearning/quiz2.R')
quiz2_quest2()
data(segmentationOriginal)
library(AppliedPredictiveModeling)
data(segmentationOriginal)
library(caret)
modFit <- train(Case ~ .,method="rpart",data=training)
source('C:/ckd/personal/coursera/MachineLearning/quiz3.R')
quiz3_question1()
source('C:/ckd/personal/coursera/MachineLearning/quiz3.R')
quiz3_question1()
str(segmentationOriginal)
head(segmentationOriginal$TotalIntench2)
colnames(segmentationOriginal)
inTrain <- createDataPartition(y=segmentationOriginal$Case, p = .7, list=FALSE)
training <- segmentationOriginal[ inTrain,]
source('C:/ckd/personal/coursera/MachineLearning/quiz3.R')
quiz3_question1()
head(segmentationOriginal$Case)
head(segmentationOriginal)
View(segmentationOriginal)
View(segmentationOriginal)
source('C:/ckd/personal/coursera/MachineLearning/quiz3.R')
quiz3_question1
quiz3_question1()
install.packages(rattle)
install.packages("rattle")
source('C:/ckd/personal/coursera/MachineLearning/quiz3.R')
quiz3_question1()
install.packages("rattle", dependencies = TRUE)
install.packages("rattle", dependencies = TRUE)
source('C:/ckd/personal/coursera/MachineLearning/quiz3.R')
quiz3_question1()
source('C:/ckd/personal/coursera/MachineLearning/quiz3.R')
quiz3_question1()
install.packages("pgmm")
source('C:/ckd/personal/coursera/MachineLearning/quiz3.R')
source('C:/ckd/personal/coursera/MachineLearning/quiz3.R')
quiz3_question3()
?tree
install.packages("tree")
library(tree)
?tree
tree(Area ~ ., pgmm)
library(pgmm)
tree(Area ~ ., olive)
modFit <- tree(Area ~ ., olive)
predict.tree(modFit, newdata = as.data.frame(t(colMeans(olive))))
tree.predict(modFit, newdata = as.data.frame(t(colMeans(olive))))
predict(modFit,  newdata = as.data.frame(t(colMeans(olive))))
modFit
as.data.frame(t(colMeans(olive)))
fancyRpartPlot(modFit$finalModel)
data(olive)
olive
oliveminus1 <- olive[,-1]
oliveminus1
head(olive)
source('C:/ckd/personal/coursera/MachineLearning/quiz3.R')
quiz3_question3()
source('C:/ckd/personal/coursera/MachineLearning/quiz3.R')
quiz3_question3()
uniq(oliveminus1)
unique(oliveminus1)
unique(oliveminus1$Area)
source('C:/ckd/personal/coursera/MachineLearning/quiz3.R')
quiz3_question3()
source('C:/ckd/personal/coursera/MachineLearning/quiz3.R')
quiz3_question3()
?tree
source('C:/ckd/personal/coursera/MachineLearning/quiz3.R')
quiz3_question3()
source('C:/ckd/personal/coursera/MachineLearning/quiz3.R')
quiz3_question3()
source('C:/ckd/personal/coursera/MachineLearning/quiz3.R')
quiz3_question3()
source('C:/ckd/personal/coursera/MachineLearning/quiz3.R')
quiz3_question3()
source('C:/ckd/personal/coursera/MachineLearning/quiz3.R')
quiz3_question3()
as.data.frame(t(colMeans(olive)))
library(ElemStatLearn)
data(SAheart)
set.seed(8484)
train <- sample(1:dim(SAheart)[1],size=dim(SAheart)[1]/2,replace=F)
trainSA <- SAheart[train,]
testSA <- SAheart[-train,]
set.seed(13234)
install.packages("ElemStatLearn")
library(ElemStatLearn)
data(SAheart)
set.seed(8484)
train <- sample(1:dim(SAheart)[1],size=dim(SAheart)[1]/2,replace=F)
trainSA <- SAheart[train,]
testSA <- SAheart[-train,]
set.seed(13234)
View(trainSA)
View(trainSA)
source('C:/ckd/personal/coursera/MachineLearning/quiz3.R')
quiz3_question4()
source('C:/ckd/personal/coursera/MachineLearning/quiz3.R')
quiz3_question4()
?glm
source('C:/ckd/personal/coursera/MachineLearning/quiz3.R')
quiz3_question4()
library(ElemStatLearn)
data(SAheart)
set.seed(8484)
train <- sample(1:dim(SAheart)[1],size=dim(SAheart)[1]/2,replace=F)
trainSA <- SAheart[train,]
testSA <- SAheart[-train,]
set.seed(13234)
modFit <- glm(formula=chd ~ age + alcohol + obesity + tobacco + typea + ldl, data = SAheart, method = "glm", family = "binomial")
source('C:/ckd/personal/coursera/MachineLearning/quiz3.R')
library(ElemStatLearn)
data(SAheart)
set.seed(8484)
train <- sample(1:dim(SAheart)[1],size=dim(SAheart)[1]/2,replace=F)
trainSA <- SAheart[train,]
testSA <- SAheart[-train,]
set.seed(13234)
modFit <- glm(formula=chd ~ age + alcohol + obesity + tobacco + typea + ldl, data = SAheart, method = "glm", family = "binomial")
modFit <- glm(formula=chd ~ age + alcohol + obesity + tobacco + typea + ldl, data = SAheart, family = "binomial")
missClassTrain <- missClass(trainSA, predict(modFit, newdata = trainSA))
missClassTrain
missClassTrain <- missClass(trainSA, predict(modFit, newdata = trainSA, type = response))
missClassTrain <- missClass(trainSA, predict(modFit, newdata = trainSA, type = "response"))
missClassTrain
source('C:/ckd/personal/coursera/MachineLearning/quiz3.R')
quiz3_question4()
predict(modFit, newdata = trainSA, type = "response")
head(predict(modFit, newdata = trainSA, type = "response"))
source('C:/ckd/personal/coursera/MachineLearning/quiz3.R')
head(predict(modFit, newdata = trainSA, type = "response"))
quiz3_question4()
source('C:/ckd/personal/coursera/MachineLearning/quiz3.R')
quiz3_question4()
source('C:/ckd/personal/coursera/MachineLearning/quiz3.R')
quiz3_question4()
source('~/.active-rstudio-document')
quiz3_question4()
?lm
source('C:/ckd/personal/coursera/MachineLearning/quiz3.R')
quiz3_question4()
source('C:/ckd/personal/coursera/MachineLearning/quiz3.R')
quiz3_question4()
source('C:/ckd/personal/coursera/MachineLearning/quiz3.R')
quiz3_question4()
source('C:/ckd/personal/coursera/MachineLearning/quiz3.R')
quiz3_question4()
source('C:/ckd/personal/coursera/MachineLearning/quiz3.R')
quiz3_question4()
head(vowel.train)
source('C:/ckd/personal/coursera/MachineLearning/quiz3.R')
quiz3_question5()
quiz3_question5()
source('C:/ckd/personal/coursera/MachineLearning/quiz3.R')
quiz3_question5()
source('C:/ckd/personal/coursera/MachineLearning/quiz3.R')
quiz3_question5()
?varImp
source('C:/ckd/personal/coursera/MachineLearning/quiz3.R')
quiz3_question5()
source('C:/ckd/personal/coursera/MachineLearning/quiz3.R')
quiz3_question5()
source('~/.active-rstudio-document')
quiz3_question5()
source('C:/ckd/personal/coursera/MachineLearning/quiz3.R')
quiz3_question5()
quiz3_question3()
source('C:/ckd/personal/coursera/MachineLearning/quiz3.R')
quiz3_question3()
source('C:/ckd/personal/coursera/MachineLearning/quiz3.R')
quiz3_question3()
source('C:/ckd/personal/coursera/MachineLearning/quiz3.R')
quiz3_question3()
source('C:/ckd/personal/coursera/MachineLearning/quiz3.R')
quiz3_question3()
source('C:/ckd/personal/coursera/MachineLearning/quiz3.R')
quiz3_question3()
quiz3_question3()
source('C:/ckd/personal/coursera/MachineLearning/quiz3.R')
quiz3_question3()
source('C:/ckd/personal/coursera/MachineLearning/quiz3.R')
atl_quiz3_question5()
alt_quiz3_question5()
source('C:/ckd/personal/coursera/MachineLearning/quiz3.R')
alt_quiz3_question5()
source('C:/ckd/personal/coursera/MachineLearning/quiz3.R')
alt_quiz3_question5()
source('C:/ckd/personal/coursera/MachineLearning/quiz3.R')
alt_quiz3_question5()
source('C:/ckd/personal/coursera/MachineLearning/quiz3.R')
alt_quiz3_question5()
source('C:/ckd/personal/coursera/MachineLearning/quiz3.R')
alt_quiz3_question5()
source('C:/ckd/personal/coursera/MachineLearning/quiz3.R')
source('C:/ckd/personal/coursera/MachineLearning/quiz3.R')
alt_quiz3_question5()
source('C:/ckd/personal/coursera/MachineLearning/quiz3.R')
alt_quiz3_question5()
source('C:/ckd/personal/coursera/MachineLearning/quiz3.R')
quiz3_question5()
?train
source('C:/ckd/personal/coursera/MachineLearning/quiz3.R')
quiz3_question5()
?rpart
rpart2
?rpart2
?mutate
library(plyr)
?mutate
?lm
install.packages("manipulate")
source('C:/ckd/personal/coursera/DataProducts/quiz1.R')
source('C:/ckd/personal/coursera/DataProducts/quiz1.R')
quiz1_question1()
source('C:/ckd/personal/coursera/DataProducts/quiz1.R')
quiz1_question1()
source('C:/ckd/personal/coursera/DataProducts/quiz1.R')
quiz1_question1()
source('C:/ckd/personal/coursera/DataProducts/quiz1.R')
quiz1_question1()
source('C:/ckd/personal/coursera/DataProducts/quiz1.R')
source('C:/ckd/personal/coursera/DataProducts/quiz1.R')
quiz1_question1()
source('C:/ckd/personal/coursera/DataProducts/quiz1.R')
quiz1_question1()
install.packages("rCharts")
install("devtools")
install.packages("devtools")
install.packages("rcharts")
install.packages("rCharts")
install.packages("rChart")
install_github('rCharts', 'ramnathv')
library(devtools)
install.packages("Rtools")
install.packages("devtools", dependencies = TRUE)
install.packages("devtools", dependencies = TRUE)
library(devtools)
find_rtools()
install.packages("Rtools")
source('C:/ckd/personal/coursera/LinearRegression/quiz1.R')
quiz1_quest2()
quiz1_quest2()$coeff
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
y <- c(1.39, 0.72, 1.55, 0.48, 1.19, -1.59, 1.23, -0.65, 1.49, 0.05)
mod <- lm(y ~ x - 1)
plot(mod)
plot(mod)
mod$fit
plot(mod$fit)
plot(mod)
abline(mod)
plot()
plot(x,y)
abline(mod)
?lm
?lm
abline(lm(y ~ x - 1))
summary(lm(y ~ x - 1))
summary(lm(y ~x))
abline(lm(y~x))
abline(lm(y ~ x - 1))
?lm
yc <- y - mean(y)
xc <- x - mean(x)
beta1 <- sum(yc * xc) / sum(xc ^ 2)
c(beta1, coef(lm(y ~ x))[2])
coef(lm(y~x-1))
install_github('slidify', 'ramnathv')
library(devtools)
install_github('slidify', 'ramnathv')
library(slidify)
install_github('slidifyLibraries', 'ramnathv')
source('C:/ckd/personal/coursera/LinearRegression/quiz1.R')
y <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
quiz1_quest9(y)
mean(y)
quiz1_quest9(0.573)
quiz1_quest9(0.8)
quiz1_quest9(0.36)
quiz1_quest9(0.44)
source('C:/ckd/personal/coursera/LinearRegression/quiz2.R')
quiz2_question3()
knitr
?knitr
library(shinyapps)
shinyapps::setAccountInfo(name='cduby-dscience', token='49F5EC5A1D945CDF85E0E3379BB22EE9', secret='YGtnwArOdprZ906xl5uHhnF7pEF4q+egMj/mcgZ+')
shinyapps::deployApp('.')
setwd("C:/ckd/personal/coursera/DataProducts/DevelopingDataProductsProject")
library(shinyapps)
shinyapps::setAccountInfo(name='cduby-dscience', token='49F5EC5A1D945CDF85E0E3379BB22EE9', secret='YGtnwArOdprZ906xl5uHhnF7pEF4q+egMj/mcgZ+')
shinyapps::deployApp('.')
setwd("C:/ckd/personal/coursera/DataProducts/DevelopingDataProductsProject")
shiny::runApp()
library(shinyapps)
shinyapps::setAccountInfo(name='cduby-dscience', token='49F5EC5A1D945CDF85E0E3379BB22EE9', secret='YGtnwArOdprZ906xl5uHhnF7pEF4q+egMj/mcgZ+')
shinyapps::deployApp('.')
shinyapps::configureApp("Fuel Efficiency Estimator", size="small")
shinyapps::configureApp("Fuel Efficiency Estimator")
mtcars
shiny::runApp('C:/ckd/personal/coursera/DataProducts/FuelEfficiencyEstimator')
shiny::runApp('C:/ckd/personal/coursera/DataProducts/FuelEfficiencyEstimator')
estimateFuelEfficiency <- function(transmissionType, quarterMileSeconds, weightPounds) {
data(mtcars)
fit <- lm(mpg ~ factor(am) + wt + qsec, mtcars)
predict(fit, newdata = data.frame(am = transmissionType, wt = weightPounds/1000, qsec=quarterMileSeconds), interval = ("prediction"))
}
estimateFuelEfficiency(0, 7.8, 4300)
mtcars
estimateFuelEfficiency(0, 16.46, 2620)
estimateFuelEfficiency(0, 15.0, 4300)
data(mpg)
library(ggplot2)
data(mpg)
mpg
estimateFuelEfficiency(0, 15.0, 4300)
shiny::runApp('C:/ckd/personal/coursera/DataProducts/FuelEfficiencyEstimator')
shiny::runApp('C:/ckd/personal/coursera/DataProducts/FuelEfficiencyEstimator')
shiny::runApp('C:/ckd/personal/coursera/DataProducts/FuelEfficiencyEstimator')
mtcars
shiny::runApp('C:/ckd/personal/coursera/DataProducts/FuelEfficiencyEstimator')
fe <- estimateFuelEfficiency(0, 15.0, 4300)
fe
fe$fit
fe[0]
class(fe)
summary(fe)
head(fe)
fe[0,0]
fe(0)
fe[1,1]
fe[1,2]
shiny::runApp('C:/ckd/personal/coursera/DataProducts/FuelEfficiencyEstimator')
shiny::runApp('C:/ckd/personal/coursera/DataProducts/FuelEfficiencyEstimator')
shiny::runApp('C:/ckd/personal/coursera/DataProducts/FuelEfficiencyEstimator')
estimateFuelEfficiency <- function(transmissionType, quarterMileSeconds, weightPounds) {
data(mtcars)
fit <- lm(mpg ~ factor(am) + wt + qsec, mtcars)
prediction <- predict(fit, newdata = data.frame(am = transmissionType, wt = weightPounds/1000, qsec=quarterMileSeconds), interval = ("prediction"))
paste(prediction[1,1], "(", predition[1, 2], " to ", prediction[1, 3], ")")
}
estimateFuelEfficiency(0, 15.0, 4300)
estimateFuelEfficiency <- function(transmissionType, quarterMileSeconds, weightPounds) {
data(mtcars)
fit <- lm(mpg ~ factor(am) + wt + qsec, mtcars)
prediction <- predict(fit, newdata = data.frame(am = transmissionType, wt = weightPounds/1000, qsec=quarterMileSeconds), interval = ("prediction"))
paste(prediction[1,1], "(", prediction[1, 2], " to ", prediction[1, 3], ")")
}
estimateFuelEfficiency(0, 15.0, 4300)
shiny::runApp('C:/ckd/personal/coursera/DataProducts/FuelEfficiencyEstimator')
estimateFuelEfficiency <- function(transmissionType, quarterMileSeconds, weightPounds) {
data(mtcars)
fit <- lm(mpg ~ factor(am) + wt + qsec, mtcars)
prediction <- predict(fit, newdata = data.frame(am = transmissionType, wt = weightPounds/1000, qsec=quarterMileSeconds), interval = ("prediction"))
paste(round(prediction[1,1], 0), "(", round(prediction[1, 2], 0), " to ", round(prediction[1, 3], 0), ")")
}
estimateFuelEfficiency(0, 15.0, 4300)
shiny::runApp('C:/ckd/personal/coursera/DataProducts/FuelEfficiencyEstimator')
shiny::runApp('C:/ckd/personal/coursera/DataProducts/FuelEfficiencyEstimator')
shiny::runApp('C:/ckd/personal/coursera/DataProducts/FuelEfficiencyEstimator')
mtcars
min(mt$wt)
min(mtcars$wt)
max(mtcars$wt)
max(mtcars$qsec)
min(mtcars$qsec)
shiny::runApp('C:/ckd/personal/coursera/DataProducts/FuelEfficiencyEstimator')
shiny::runApp('C:/ckd/personal/coursera/DataProducts/FuelEfficiencyEstimator')
setwd("C:/ckd/personal/coursera/DataProducts/FuelEfficiencyEstimator")
library(shinyapps)
shinyapps::setAccountInfo(name='cduby-dscience', token='49F5EC5A1D945CDF85E0E3379BB22EE9', secret='YGtnwArOdprZ906xl5uHhnF7pEF4q+egMj/mcgZ+')
shinyapps::deployApp('.')
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
library(shinyapps)
shinyapps::setAccountInfo(name='cduby-dscience', token='49F5EC5A1D945CDF85E0E3379BB22EE9', secret='YGtnwArOdprZ906xl5uHhnF7pEF4q+egMj/mcgZ+')
shinyapps::deployApp('.')
